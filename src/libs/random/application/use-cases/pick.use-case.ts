import { PickChoicesArray } from '@/libs/random/domain'
import { getRandomFromArray, useRandomReplica } from '@/libs/shared/random'
import { mapZodError } from '@/libs/shared/validation'
import { UseCase } from '@/libs/shared/workflow'

export const PICK_COMMAND = '/pick'

export type PickInput = {
  choices: PickChoicesArray
}

const pickReplica = useRandomReplica({
  replicas: [
    '–Ø –≤—ã–±–∏—Ä–∞—é —Ç–µ–±—è, <s>–ø–∏–∫–∞—á—É</s> <b>%choice%</b> üîÆ',
    '–ò–∑ –≤—Å–µ–≥–æ —ç—Ç–æ–≥–æ üí©, –±–æ–ª–µ–µ-–º–µ–Ω–µ–µ –µ—â–µ –≤—ã–≥–ª—è–¥–∏—Ç <b>%choice%</b>',
    '–•–º–º ü§î –î–∞–π-–∫–∞ –ø–æ–¥—É–º–∞—Ç—å.. –ü–æ–∂–∞–ª—É–π, <b>%choice%</b>',
    '<b>%choice%</b> - –∑–¥–µ—Å—å –ª—É—á—à–∏–π –≤—ã–±–æ—Ä üé±',
    'ü™ë –ï—Å–ª–∏ –±—ã —ç—Ç–æ –±—ã–ª–∞ –∑–∞–≥–∞–¥–∫–∞ –ø—Ä–æ –¥–≤–∞ —Å—Ç—É–ª–∞, —è –±—ã –≤—Å–µ —Ä–∞–≤–Ω–æ –≤—ã–±—Ä–∞–ª <b>%choice%</b>',
    '‚ú® –ó–≤–µ–∑–¥—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É—é—Ç –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è <b>%choice%</b>',
  ],
  placeholders: ['choice'],
})

export const pickUseCase =
  (): UseCase<PickInput> =>
  async ({ input: { choices } }) => {
    const validated = await PickChoicesArray.safeParseAsync(choices)

    if (!validated.success) return { message: mapZodError(validated.error) }

    const choice = getRandomFromArray(validated.data)

    return {
      message: pickReplica({ choice }),
      options: {
        cleanupMessages: false,
      },
    }
  }
