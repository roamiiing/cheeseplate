import { UseCase } from '@/libs/shared/workflow'
import { User, Tag, Chat } from '@prisma/client'
import { guardReservedTags, TagWithoutSymbol } from '@/libs/tags/domain'
import { mapZodError } from '@/libs/shared/validation'
import { useRandomReplica } from '@/libs/shared/random'
import { useReplica } from '@/libs/shared/strings'

export const DELETE_TAG_COMMAND = '/deltag'

export type DeleteTagDeps = {
  deleteTagForUser: (
    userId: User['telegramId'],
    tag: Tag['tag'],
    chatId: Chat['telegramId'],
  ) => Promise<{
    deleted: boolean
  }>
}

export type DeleteTagInput = {
  tag: Tag['tag']
}

const successfullyRemoveReplica = useRandomReplica({
  replicas: [
    '–¢—ã –±–æ–ª—å—à–µ –Ω–µ <s>—Ç–∏—Ç–∞–Ω</s> <b>%tag%</b> üï∂',
    '–û–∫–µ–π, —Å –ø–æ–∑–æ—Ä–æ–º –≤—ã—à–≤—ã—Ä–∏–≤–∞–µ–º –∏–∑ —Å–µ–∫—Ç—ã <b>%tag%</b> ü§¨Ô∏è',
    '–ö–ª—É–± <b>%tag%</b> —Å–∫–∞–∑–∞–ª bye-bye? –ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, —Å –∫–ª—É–±–æ–º <s>—Ä—É–∫–æ–∂–æ–ø–æ–≤</s> —Ç—ã –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤–æ–µ–º –º–µ—Å—Ç–µ ü§°',
    '–ú–æ–∂–µ—Ç –ø–æ—Å–ª–µ –æ—Ç–∫–∞–∑–∞ –æ—Ç <b>%tag%</b>, —Ç—ã –≤—Å—ë-—Ç–∞–∫–∏ –≤—ã–±–µ—Ä–µ—à—å –≤–µ—Ä–µ–≤–∫—É, –º—ã–ª–æ, –∏ —Å—Ç–∞—Ä—É—é —Ç–∞–±—É—Ä–µ—Ç–∫—É?????? ü§™',
    '–û–π, –±–æ–ª—å–Ω–æ –Ω–∞–¥–æ, —á–º–æ–Ω—è. –ö–∞–∫ –±—É–¥—Ç–æ —É–∂ –±–æ–ª—å–Ω–æ –Ω—É–∂–µ–Ω <b>%tag%</b> ü§¢',
    '–ó–Ω–∞–µ—à—å —á—Ç–æ –¥–µ–ª–∞—é—Ç –Ω–∞ –∑–∞–ø–∞–¥–µ —Å —Ç–µ–º–∏, –∫—Ç–æ –æ—Ç–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –æ—Ç <b>%tag%</b>? ü§ê',
    '–ù–µ—Ç —Å–ª–æ–≤, –æ–¥–Ω–∏ —ç–º–æ—Ü–∏–∏, <b>%tag%</b> –ø–æ–∫–∏–Ω—É–ª —Ç–≤–æ–π —Å–ø–∏—Å–æ—á–µ–∫ üíÖ',
  ],
  placeholders: ['tag'],
})

const hadNotThisTagReplica = useReplica({
  replica: '–£ —Ç–µ–±—è –Ω–µ –±—ã–ª–æ —Ç–µ–≥–∞ <b>%tag%</b>',
  placeholders: ['tag'],
})

export const deleteTagUseCase =
  ({ deleteTagForUser }: DeleteTagDeps): UseCase<DeleteTagInput> =>
  async ({ userInfo: { userId }, chatInfo: { chatId }, input: { tag } }) => {
    if (!tag) {
      return { message: `–ê —Ç–µ–≥ —É–∫–∞–∑–∞—Ç—å? <pre>${DELETE_TAG_COMMAND}</pre>` }
    }

    const validated = await TagWithoutSymbol.safeParseAsync(tag)

    if (!validated.success) {
      return { message: mapZodError(validated.error) }
    }

    if (!guardReservedTags(validated.data)) {
      return { message: '–≠—Ç–æ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–≥' }
    }

    const { deleted } = await deleteTagForUser(userId, validated.data, chatId)

    if (!deleted) {
      return { message: hadNotThisTagReplica({ tag }) }
    }

    return { message: successfullyRemoveReplica({ tag }) }
  }
