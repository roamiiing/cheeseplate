import { UseCase } from '@/libs/shared/workflow'
import { User, Tag, Chat } from '@prisma/client'
import { guardReservedTags, TagWithoutSymbol } from '@/libs/tags/domain'
import { mapZodError } from '@/libs/shared/validation'
import { useRandomReplica } from '@/libs/shared/random'
import { useReplica } from '@/libs/shared/strings'

export const SET_TAG_COMMAND = '/settag'

export type SetTagDeps = {
  setTagForUser: (
    userId: User['telegramId'],
    tag: Tag['tag'],
    chatId: Chat['telegramId'],
  ) => Promise<{
    newlyInserted: boolean
  }>
}

export type SetTagInput = {
  tag: Tag['tag']
}

const successfulySetReplica = useRandomReplica({
  replicas: [
    '–¢–µ–ø–µ—Ä—å —Ç—ã <s>—Ç–∏—Ç–∞–Ω</s> <b>%tag%</b> üó°',
    '–ü–æ–Ω—è–ª, –∑–∞–ø–∏—Å–∞–ª –≤–∞—Å –≤ —Å–µ–∫—Ç—É <b>%tag%</b> ‚úùÔ∏è',
    '–ü—Ä–æ–º–µ–Ω—è–ª –∫–ª—É–± <s>—Ä—É–∫–æ–∂–æ–ø–æ–≤</s> –Ω–∞ –∫–ª—É–± <b>%tag%</b> üçë',
    '–¢–∞–∫–∏–º –∫–∞–∫ —Ç—ã —è –æ–±—ã—á–Ω–æ —Å–æ–≤–µ—Ç—É—é –≤—ã–±—Ä–∞—Ç—å –≤–µ—Ä—ë–≤–∫—É –∏ –º—ã–ª–æ, –Ω–æ, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–≥–æ–¥–Ω—è —ç—Ç–æ <b>%tag%</b> üò≠',
    '<b>%tag%</b>?! –≠—Ç–æ —á—Ç–æ-—Ç–æ –Ω–æ–≤–µ–Ω—å–∫–æ–µ ü§î',
    '–ù–µ –∑–Ω–∞—é –∫–∞–∫ —Ç—ã, –∞ —è —Å—á–∏—Ç–∞—é —á—Ç–æ –ª—é–±–∏—Ç—å <b>%tag%</b> - –æ–ø–∞—Å–Ω–æ üò∞',
    '–û–≥–æ, —Ç—ã —Ç–µ–ø–µ—Ä—å —Å <b>%tag%</b>, —ç—Ç–æ —Ç–∞–∫ –∑–∞–≤–æ–¥–∏—Ç ü•µüöô',
    '–≠–π, –¥—Ä—É–∂–æ–∫-–ø–∏—Ä–æ–∂–æ–∫, —Ç–æ–±–æ–π –≤—ã–±—Ä–∞–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –¥–≤–µ—Ä—å, –∫—Ä—É–∂–æ–∫ –ª—é–±–∏—Ç–µ–ª–µ–π <b>%tag%</b> –¥–≤–∞ –±–ª–æ–∫–∞ –≤–Ω–∏–∑, –≤–ø—Ä–æ—á–µ–º, –º–Ω–µ —á—Ç–æ-–ª–∏ decide –∫–∞–∫–∏–µ an*l slaves —Ç–µ–±—è –Ω–∞ —ç—Ç–æ –≤—ã–Ω—É–¥–∏–ª–∏ ü§ê',
  ],
  placeholders: ['tag'],
})

const reservedTagReplica = useReplica({
  replica: '–≠—Ç–æ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–≥',
})

const alreadyHasTagReplica = useReplica({
  replica: '–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å —Ç–µ–≥ %tag%',
  placeholders: ['tag'],
})

export const setTagUseCase =
  ({ setTagForUser }: SetTagDeps): UseCase<SetTagInput> =>
  async ({ userInfo: { userId }, chatInfo: { chatId }, input: { tag } }) => {
    if (!tag) {
      return { message: '–ê —Ç–µ–≥ —É–∫–∞–∑–∞—Ç—å? <pre>/settag —Ç–µ–≥</pre>' }
    }

    const validated = await TagWithoutSymbol.safeParseAsync(tag)

    if (!validated.success) {
      return { message: mapZodError(validated.error) }
    }

    if (!guardReservedTags(validated.data)) {
      return { message: reservedTagReplica() }
    }

    const { newlyInserted } = await setTagForUser(
      userId,
      validated.data,
      chatId,
    )

    if (!newlyInserted) {
      return { message: alreadyHasTagReplica({ tag }) }
    }

    return {
      message: successfulySetReplica({
        tag,
      }),
    }
  }
