import { UseCase } from '@/libs/shared/workflow'
import { User, Tag, Chat } from '@prisma/client'
import { ALL_TAG } from '@/libs/tags/domain'
import { useRandomReplica } from '@/libs/shared/random'
import { useReplica } from '@/libs/shared/strings'

export const DRY_PING_COMMAND = '/dryping'

export type PingDeps = {
  getUsersWithTags: (
    tags: Tag['tag'][],
    chatId: Chat['telegramId'],
    currentUserId?: User['id'],
  ) => Promise<Pick<User, 'telegramId' | 'displayName'>[]>
  getAllUsersInChat: (
    chatId: Chat['telegramId'],
    currentUserId?: User['id'],
  ) => Promise<Pick<User, 'telegramId' | 'displayName'>[]>
}

export type PingInput = {
  tags: Tag['tag'][]
  dry?: boolean
}

const drypingReplica = useRandomReplica({
  replicas: [
    '–≠—Ç–∏ –≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω—ã–µ –ª—é–¥–∏ –ø–æ–ª—É—á–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ üó°: <b>%data%</b>',
    '–≠—Ç–∞ —Å–µ–∫—Ç–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —ç—Ç–∏—Ö –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã—Ö —á–µ–ª–æ–≤–µ–∫–æ–≤ ‚õ™Ô∏è: <b>%data%</b>',
    '–ù—É —ç—Ç–∏—Ö –¥—É—Ä–∞—à–µ–∫ –º–æ–∂–Ω–æ –ø–æ –ø–∞–ª—å—Ü–∞–º –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å ü§Ø: <b>%data%</b>',
    '–ü–æ —ç—Ç–æ–º—É —Ç–µ–≥—É –±—É–¥—É—Ç –ø—Ä–∏–∑–≤–∞–Ω—ã ü™ñ: <b>%data%</b>',
    '–¢–∞–∫ —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–∏–∑–≤–∞—Ç—å –∏—Ö üò±: <b>%data%</b>',
    '–í–æ—Ç —ç—Ç–æ—Ç —Å–ø–∏—Å–æ—á–µ–∫ –±—É–¥–µ—Ç –ø—É—à–Ω—É—Ç ü§ì: <b>%data%</b>',
  ],
  placeholders: ['data'],
})

const pingReplica = useRandomReplica({
  replicas: [
    'ü™ñ –ü—Ä–∏–∑—ã–≤–∞—é –≤–∞—Å <b>%data%</b>',
    '–•–∞—Ö–∞, –Ω—É –≤–æ—Ç –∏ –¥–æ –≤–∞—Å –¥–æ–±—Ä–∞–ª–∏—Å—å, <b>%data%</b> üöî',
    '<b>%data%</b>, –≤–∞–º –ø—Ä–∏—à–ª–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ—Å–º–æ—Ç—Ä–∏, –≤–¥—Ä—É–≥ —Ç–∞–º —á—Ç–æ-—Ç–æ –≤–∞–∂–Ω–æ–µ üòâ',
    '–†–æ—Ç–∞ –ø–æ–¥—ä–µ–º! <b>%data%</b> üéñÔ∏è',
    '–í–∞—Å –∫—Ç–æ-—Ç–æ —Ç–µ–≥–Ω—É–ª!!! <b>%data%</b> üòù',
    '–ê–õ–Ø–†–ú! <b>%data%</b> üö®',
    'console.warn("Vas tegnuli, <b>%data%</b> üôà")',
  ],
  placeholders: ['data'],
})

const noSuchUsersReplica = useReplica({
  replica: '–ù–µ—Ç —é–∑–µ—Ä–æ–≤ —Å —Ç–∞–∫–∏–º–∏ —Ç–µ–≥–∞–º–∏',
})

export const pingUseCase =
  ({ getUsersWithTags, getAllUsersInChat }: PingDeps): UseCase<PingInput> =>
  async ({
    chatInfo: { chatId },
    userInfo: { userId },
    input: { tags, dry = false },
  }) => {
    const users = await (tags.includes(ALL_TAG)
      ? getAllUsersInChat(chatId, !dry ? Number(userId) : undefined)
      : getUsersWithTags(tags, chatId, !dry ? Number(userId) : undefined))

    if (!dry) {
      if (users.length === 0) return

      return {
        message: pingReplica(
          {
            data: users
              .map(
                ({ displayName, telegramId }) =>
                  `<a href="tg://user?id=${telegramId}">${displayName}</a>`,
              )
              .join(', '),
          },
          {
            escape: false,
          },
        ),
        options: {
          notify: true,
        },
      }
    }

    if (users.length === 0) return { message: noSuchUsersReplica() }

    return {
      message: drypingReplica({
        data: users.map(({ displayName }) => `${displayName}`).join(', '),
      }),
    }
  }
