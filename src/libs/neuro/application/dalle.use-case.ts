import { GeneratorUseCase, Media } from '@/libs/shared/workflow'
import { mapZodError } from '@/libs/shared/validation'
import { useRandomReplica } from '@/libs/shared/random'
import { DallePrompt } from '@/libs/neuro/domain'
import { Time } from '@/libs/shared/units'

export const DALLE_COMMAND = '/dalle'
export const DALLE_TIMEOUT = Time(4, 'm')

export type DalleDeps = {
  requestDalleMiniImages: (prompt: string) => Promise<Media[] | null>
}

export type DeleteTagInput = {
  prompt: string
}

const waitReplica = useRandomReplica({
  replicas: [
    '–°–µ–∫—É–Ω–¥ –æ—á–∫—É.. <i>%prompt%</i> —É–∂–µ –Ω–∞ –ø–æ–¥—Ö–æ–¥–µ ‚è≥',
    '<i>%prompt%</i>? –ê —Ç—ã —Ö–æ—Ä–æ—à) –û–∂–∏–¥–∞–π ü§Ø',
    '–í–∞—É, –º–Ω–µ —Ç–æ–∂–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –∫–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç <i>%prompt%</i> üîÆ',
    '–ï—â–µ –ë–æ–≥–∏ –û–ª–∏–º–ø–∞ üèõ –¥—É–º–∞–ª–∏ —á–µ–º –æ–∑–∞–¥–∞—á–∏—Ç—å –≤–µ–ª–∏–∫–∏—Ö —Ö—É–¥–æ–∂–Ω–∏–∫–æ–≤. –ù–æ –≤—Ä–µ–º–µ–Ω–∞ –º–µ–Ω—è—é—Ç—Å—è, —Ä–∏—Å–æ–≤–∞—Ç—å <i>%prompt%</i> –±—É–¥—É—Ç –Ω–µ –í–µ–ª–∏–∫–∏–µ —Ö—É–¥–æ–∂–Ω–∏–∫–∏, –∞ DALL-E, —Ö–æ—Ç—è –∏ —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç –Ω–µ —Ç–æ —á—Ç–æ–±—ã –ë–æ–≥–∏... ü§¢',
  ],
  placeholders: ['prompt'],
})

const problemsReplica = useRandomReplica({
  replicas: [
    '–ü—Ä–æ–±–ª–µ–º—ã —Å Dalle, –ø—Ä–∏—Ö–æ–¥–∏ –ø–æ–∑–∂–µ ü•≤',
    '–ö–∞–∂–µ—Ç—Å—è Dalle —É–º–µ—Ä–ª–∞, –ø–æ–¥–æ–∂–¥–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ ü§ß',
  ],
  placeholders: [],
})

export const dalleUseCase = ({
  requestDalleMiniImages,
}: DalleDeps): GeneratorUseCase<DeleteTagInput> =>
  async function* dalleUseCase({ input: { prompt } }) {
    const validated = await DallePrompt.safeParseAsync(prompt)

    if (!validated.success) {
      return yield { message: mapZodError(validated.error) }
    }

    yield { message: waitReplica({ prompt: validated.data }) }

    const result = await requestDalleMiniImages(validated.data)

    if (!result) {
      return yield {
        message: problemsReplica({}),
      }
    }

    yield {
      media: result,
    }
  }
