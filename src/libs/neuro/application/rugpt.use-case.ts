import { GeneratorUseCase, Media } from '@/libs/shared/workflow'
import { mapZodError } from '@/libs/shared/validation'
import { useRandomReplica } from '@/libs/shared/random'
import { RuGptPrompt } from '@/libs/neuro/domain'
import { Time } from '@/libs/shared/units'

export const RUGPT_COMMAND = '/rugpt'
export const RUGPT_TIMEOUT = Time(4, 'm')

export type RuGptDeps = {
  requestRuGptText: (prompt: string) => Promise<string | null>
}

export type RuGptInput = {
  prompt: string
}

const waitReplica = useRandomReplica({
  replicas: [
    '<i>%prompt%</i>? –•–º, –Ω—É –ø–æ—Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ –º–æ–∂–µ—Ç <s>–≤—ã—Å—Ä...</s> –≤—ã–¥–∞—Ç—å ruGPT üòâ',
    '–ì–æ–≤–æ—Ä—è—Ç —á—Ç–æ ruGPT –º–æ–∂–µ—Ç –∑–∞–º–µ—Å—Ç–∏—Ç—å —Ü–µ–ª—ã–π —à—Ç–∞—Ç —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤ –≤ –°–ú–ò! üò± –ù–æ –¥–∞–≤–∞–π—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–∏–º, –∫–∞–∫ –æ–Ω —Å–ø—Ä–∞–≤–∏—Ç—Å—è —Å <i>%prompt%</i>',
  ],
  placeholders: ['prompt'],
})

const problemsReplica = useRandomReplica({
  replicas: [
    '–ö–∞–∫ –∏ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ä—É—Å—Å–∫–∏—Ö üá∑üá∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π (–∏ –Ω–µ —Ç–æ–ª—å–∫–æ), ruGPT –Ω–µ –æ—á–µ–Ω—å –ª—é–±–∏—Ç —Ä–∞–±–æ—Ç–∞—Ç—å. –ü—Ä–∏—Ö–æ–¥–∏ –ø–æ–∑–∂–µ(',
  ],
  placeholders: [],
})

export const ruGptUseCase = ({
  requestRuGptText,
}: RuGptDeps): GeneratorUseCase<RuGptInput> =>
  async function* ruGptUseCase({ input: { prompt } }) {
    const validated = await RuGptPrompt.safeParseAsync(prompt)

    if (!validated.success) {
      return yield { message: mapZodError(validated.error) }
    }

    yield { message: waitReplica({ prompt: validated.data }) }

    const result = await requestRuGptText(validated.data)

    if (!result) {
      return yield {
        message: problemsReplica({}),
      }
    }

    yield {
      message: result,
    }
  }
